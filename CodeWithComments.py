# >_ <- условное обозначение начала комментакия (нигде больше не применяется, использую просто для удобства)

# >_ подключение библиотеки компьютерного зрения
import cv2

"""
    Код замены выбранного цвета на изображение
    (версия с комментариями)
"""

# >_ объявляем индификатор камеры ( подключаем камеру к проекту)
# >_ ВАЖНО! чтобы камера была свободна (все приложения, использующие камеру, должны быть закрыты)
cap = cv2.VideoCapture( 0 )

# >_ открываем изображение и сохраняем в переменную img
img = cv2.imread('kot.jpg') # >_ имя файла можно заменить на любое
                            # >_ Главное! имя должно быть в кавычках
                            # >_ Изображение должно быть в той же папке, что и этот скрипт
                            # >_ (используя английскую расскладку: э -> ' ; shift+э -> " ) 
                            # >_ !!!! изображение должно быть
                            #    высотой в 480 пикселей, шириной в 460 пикселей.
                            #    изменить размер изображения можно в любом графическом редакторе

# >_ показываем изображение в окне с именем "image"
cv2.imshow('image', img)      

# запускаем бесконечный цикл
while True:
    # >_ считываем изображение с камеры с помощью вункции read , обращаясь через
    #      индификатор камеры cap 
    # >_ в переменную rt записывается True, если считать удалось, и
    #      False, если по какой-то причине изображение считать не удалось (в проекте не используется)
    # >_ в переменную frame записывается значение нашего кадра в виде массива numpy    
    rt, frame = cap.read()

    # >_  переводим кадр frame из формата  BGR в формат HSV
    frame_HSV = cv2.cvtColor (frame, cv2.COLOR_BGR2HSV )



    # >_ задаем минимальные и максимальные значения нашего цвете в пространстве HSV

    # >_ в clr_low  записываются ТОЛЬКО минимальные значения
    # >_ в clr_high записываются ТОЛЬКО максимальные значения

    # >_ H - Hue - цветовой тон. Первое значение в кортеже ( первое число в круглых скобках )
    #      Минимальное значение - 0, максимальное - 180 
    #      Позволяет выбрать ЛЮБОЙ цвет. 
    #      (смотреть по шкале hue (надеюсь, не забуду приложить) )

    # >_ S - Saturation - насыщенность. Второе значение в кортеже (второе число в круглых скобках)
    #      Определяет, насколько цвет светлый (белый)
    #      чем меньше значение, тем более светлый цвет ищет

    # >_ V- Value, same Brightness - значение цвета, оно же яркость
    #      Определяет, насколько цвет тусклый (чёрный)
    #      чем меньше значение, тем более тёмный цвет ищет
    
              #( H,  S,   V)
    clr_low  = (12, 140, 70)
    clr_high = (40, 255, 255)


    # >_ находим цветовой промежуток (изображение-маску) функцией inRangе
    frame_clr = cv2.inRange (frame_HSV, clr_low, clr_high)

    # >_ показываем кадр frame с камеры до замены цвета на изображение  
    cv2.imshow('before change', frame )

    # >_  замена искомого цвета на кадре изображения frame на
    #      соответствующие пиксели (по изображению-маске frame_clr )
    #      с входного изображения img
    frame [frame_clr == 255] = img[frame_clr == 255]

    # >_ замена искомого цвета на кадре изображения frame на цвет 
    #     по пикселям с массива frame_clr
    # >_ ДЕАКТИВИРОВАНО для оакивации нужно удалить решётку перед командой
    #frame [frame_clr == 255] = (200, 50, 100) # <- это фиолетовый
    
    # >_ показываем кадр после замены 
    cv2.imshow('after change', frame )

    # >_ показываем маску цвета (она черно-белая )
    cv2.imshow('color-mask', frame_clr )

    # >_ условие прерывания
    #     По нажатию на кнопку 'q' на клавиатуре завершается работа программы
    if cv2.waitKey(1) == ord('q'):
        break
# >_ завершение работы с камерой
#     Нужно для освобождения камеры для других приложений
cap.release()

# >_ закрытие всех созданных окон
cv2.destroyAllWindows()
